@startuml Complete Application Flow

actor Client
participant "AuthController" as AC
participant "AuthService" as AS
participant "JwtTokenProvider" as JTP
participant "UserRepository" as UR
participant "SecurityContext" as SC
participant "JwtAuthenticationFilter" as JAF
participant "OrderController" as OC
participant "OrderService" as OS
participant "ProductRepository" as PR
participant "OrderRepository" as OR
participant "InventoryService" as IS

== User Registration ==
Client -> AC: POST /api/auth/register (RegisterRequest)
AC -> AS: register(RegisterRequest)
AS -> UR: findByEmail(email)
UR --> AS: Optional<User>
AS -> UR: save(User)
UR --> AS: User
AS --> AC: User
AC --> Client: ResponseEntity<ApiResponse<?>>

== User Login ==
Client -> AC: POST /api/auth/login (LoginRequest)
AC -> AS: login(LoginRequest)
AS -> UR: findByEmail(email)
UR --> AS: Optional<User>
AS -> AS: passwordEncoder.matches(password, user.getPassword())
AS -> JTP: createToken(Authentication)
JTP --> AS: JWT token
AS -> JTP: createRefreshToken(username)
JTP --> AS: Refresh token
AS --> AC: AuthResponse(token, refreshToken)
AC --> Client: ResponseEntity<AuthResponse>

== Protected API Request (Order Creation) ==
Client -> JAF: POST /api/orders with Authorization header
JAF -> JAF: resolveToken(request)
JAF -> JTP: validateToken(jwt)
JTP --> JAF: boolean (valid/invalid)
JAF -> JTP: getAuthentication(jwt)
JTP --> JAF: Authentication
JAF -> SC: setAuthentication(auth)
JAF --> OC: Forward request

OC -> OS: createOrder(Order)
OS -> OS: generateOrderNumber()
OS -> UR: findById(customerId)
UR --> OS: Optional<User>
OS -> OS: processOrderItems(Order)
OS -> PR: findById(productId)
PR --> OS: Optional<Product>
OS -> OS: calculateOrderTotals(Order)
OS -> OS: updateInventoryForOrder(Order)
OS -> IS: updateInventory(productId, quantity)
IS --> OS: void
OS -> OR: save(Order)
OR --> OS: Order
OS --> OC: Order
OC --> Client: ResponseEntity<ApiResponse<?>>

== Order Status Update ==
Client -> JAF: PUT /api/orders/{id}/status with Authorization header
JAF -> JAF: resolveToken(request)
JAF -> JTP: validateToken(jwt)
JTP --> JAF: boolean (valid/invalid)
JAF -> JTP: getAuthentication(jwt)
JTP --> JAF: Authentication
JAF -> SC: setAuthentication(auth)
JAF --> OC: Forward request

OC -> OS: updateOrderStatus(id, status)
OS -> OR: findById(id)
OR --> OS: Optional<Order>
OS -> OS: isValidStatusTransition(currentStatus, newStatus)
OS -> OR: save(Order)
OR --> OS: Order
OS --> OC: Order
OC --> Client: ResponseEntity<ApiResponse<?>>

== Order Cancellation ==
Client -> JAF: PUT /api/orders/{id}/cancel with Authorization header
JAF -> JAF: resolveToken(request)
JAF -> JTP: validateToken(jwt)
JTP --> JAF: boolean (valid/invalid)
JAF -> JTP: getAuthentication(jwt)
JTP --> JAF: Authentication
JAF -> SC: setAuthentication(auth)
JAF --> OC: Forward request

OC -> OS: cancelOrder(id)
OS -> OR: findById(id)
OR --> OS: Optional<Order>
OS -> OS: canCancelOrder(Order)
OS -> OS: restoreInventoryForOrder(Order)
OS -> IS: updateInventory(productId, quantity)
IS --> OS: void
OS -> OR: save(Order)
OR --> OS: Order
OS --> OC: Order
OC --> Client: ResponseEntity<ApiResponse<?>>

== Token Refresh ==
Client -> AC: POST /api/auth/refresh (refreshToken)
AC -> JTP: validateToken(refreshToken)
JTP --> AC: boolean (valid/invalid)
AC -> JTP: getUsername(refreshToken)
JTP --> AC: username
AC -> UR: findByEmail(username)
UR --> AC: Optional<User>
AC -> JTP: createToken(Authentication)
JTP --> AC: JWT token
AC -> JTP: createRefreshToken(username)
JTP --> AC: Refresh token
AC --> Client: ResponseEntity<AuthResponse>

== Logout ==
Client -> AC: POST /api/auth/logout (token)
AC -> JTP: getUsername(token)
JTP --> AC: username
AC -> AS: logout(username)
AS --> AC: void
AC --> Client: ResponseEntity<ApiResponse<?>>

@enduml